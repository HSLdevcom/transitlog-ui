# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

"Any object that describes something with a position implements this interface."
interface Position {
  lat: Float
  lng: Float
}

type Alert {
  affectedId: String!
  category: AlertCategory!
  description: String!
  distribution: AlertDistribution!
  endDateTime: DateTime!
  id: Int!
  impact: AlertImpact!
  lastModifiedDateTime: DateTime!
  level: AlertLevel!
  startDateTime: DateTime!
  title: String!
  url: String
}

type AreaJourney {
  alerts: [Alert!]!
  cancellations: [Cancellation!]!
  departureDate: Date!
  departureTime: Time!
  direction: Direction!
  events: [JourneyEvent]!
  headsign: String
  id: ID!
  isCancelled: Boolean!
  lineId: String
  mode: String
  operatorId: String
  routeId: String!
  uniqueVehicleId: VehicleId
  vehicleId: String
}

type Cancellation {
  cancellationEffect: CancellationEffect!
  cancellationType: CancellationType!
  category: AlertCategory!
  departureDate: Date!
  description: String!
  direction: Direction!
  id: Int!
  isCancelled: Boolean!
  journeyStartTime: Time!
  lastModifiedDateTime: DateTime!
  routeId: String!
  subCategory: CancellationSubcategory!
  title: String!
}

type Departure {
  alerts: [Alert!]!
  cancellations: [Cancellation!]!
  dayType: String!
  departureDate: Date!
  departureId: Int!
  departureTime: Time!
  direction: Direction!
  equipmentColor: String
  equipmentIsRequired: Boolean
  equipmentType: String
  extraDeparture: String!
  id: ID!
  index: Int
  isCancelled: Boolean!
  isNextDay: Boolean!
  isTimingStop: Boolean!
  journey: DepartureJourney
  mode: String!
  observedArrivalTime: ObservedArrival
  observedDepartureTime: ObservedDeparture
  operatorId: String
  originDepartureTime: PlannedDeparture
  plannedArrivalTime: PlannedArrival!
  plannedDepartureTime: PlannedDeparture!
  recoveryTime: Int
  routeId: String!
  stop: RouteSegment!
  stopId: String!
  terminalTime: Int
}

type DepartureJourney {
  _numInstance: Int
  alerts: [Alert!]!
  cancellations: [Cancellation!]!
  departureDate: Date!
  departureTime: Time!
  direction: Direction!
  events: [JourneyEvent!]
  id: ID!
  isCancelled: Boolean!
  lineId: String
  mode: String
  originStopId: String
  routeId: String!
  uniqueVehicleId: VehicleId
}

type Equipment {
  _matchScore: Float
  age: Int!
  emissionClass: String!
  emissionDesc: String!
  exteriorColor: String!
  id: ID!
  inService: Boolean
  operatorId: String!
  operatorName: String
  registryNr: String!
  type: String!
  vehicleId: String!
}

type ExceptionDay {
  dayType: String!
  description: String
  effectiveDayTypes: [String!]!
  endTime: Time
  exceptionDate: Date!
  exclusive: Boolean!
  id: ID!
  modeScope: String
  startTime: Time
}

type Journey {
  alerts: [Alert!]!
  cancellations: [Cancellation!]!
  departureDate: Date!
  departureTime: Time!
  departures: [Departure!]!
  direction: Direction!
  equipment: Equipment
  events: [JourneyEvent!]!
  headsign: String
  id: ID!
  isCancelled: Boolean!
  lineId: String
  mode: String
  name: String
  operatorId: String
  originStopId: String
  routeId: String!
  uniqueVehicleId: VehicleId
  vehicleId: String
}

type JourneyEvent implements Position {
  delay: Int
  doorStatus: Boolean
  heading: Int
  id: ID!
  lat: Float
  lng: Float
  nextStopId: String
  receivedAt: DateTime!
  recordedAt: DateTime!
  recordedAtUnix: Int!
  recordedTime: Time!
  velocity: Float
}

type Line {
  _matchScore: Float
  id: ID!
  lineId: String!
  name: String
  routesCount: Int
}

type ObservedArrival {
  arrivalDate: Date!
  arrivalDateTime: DateTime!
  arrivalEvent: JourneyEvent!
  arrivalTime: Time!
  arrivalTimeDifference: Int!
  doorDidOpen: Boolean!
  id: ID!
}

type ObservedDeparture {
  departureDate: Date!
  departureDateTime: DateTime!
  departureEvent: JourneyEvent!
  departureTime: Time!
  departureTimeDifference: Int!
  id: ID!
}

type PlannedArrival {
  arrivalDate: Date!
  arrivalDateTime: DateTime!
  arrivalTime: Time!
  id: ID!
  isNextDay: Boolean
}

type PlannedDeparture {
  departureDate: Date!
  departureDateTime: DateTime!
  departureTime: Time!
  id: ID!
  isNextDay: Boolean
}

type Query {
  alerts(alertSearch: AlertSearchInput, language: String!, time: String): [Alert!]!
  cancellations(cancellationSearch: CancellationSearchInput, date: Date): [Cancellation!]!
  departures(date: Date!, filter: DepartureFilterInput, stopId: String!): [Departure]!
  equipment(date: Date, filter: EquipmentFilterInput): [Equipment]!
  eventsByBbox(bbox: PreciseBBox!, date: Date!, filters: AreaEventsFilterInput, maxTime: DateTime!, minTime: DateTime!): [AreaJourney]!
  exceptionDays(year: String!): [ExceptionDay]!
  journey(departureDate: Date!, departureTime: Time!, direction: Direction!, routeId: String!, uniqueVehicleId: VehicleId): Journey
  journeys(departureDate: Date!, direction: Direction!, routeId: String!): [Journey]!
  lines(date: Date, filter: LineFilterInput, includeLinesWithoutRoutes: Boolean = false): [Line]!
  route(date: Date!, direction: Direction!, routeId: String!): Route
  routeDepartures(date: Date!, direction: Direction!, routeId: String!, stopId: String!): [Departure]!
  routeGeometry(date: Date!, direction: Direction!, routeId: String!): RouteGeometry
  routeSegments(date: Date!, direction: Direction!, routeId: String!): [RouteSegment]!
  routes(date: Date, filter: RouteFilterInput, line: String): [Route]!
  stop(date: Date!, stopId: String!): Stop
  stops(date: Date, filter: StopFilterInput): [SimpleStop]!
  stopsByBbox(bbox: PreciseBBox!, filter: StopFilterInput): [SimpleStop]!
  uiMessage: UIMessage!
  vehicleJourneys(date: Date!, uniqueVehicleId: VehicleId!): [VehicleJourney]!
  weeklyDepartures(date: Date!, direction: Direction!, routeId: String!, stopId: String!): [Departure]!
}

type Route {
  _matchScore: Float
  alerts: [Alert!]!
  cancellations: [Cancellation!]!
  destination: String
  destinationStopId: String
  direction: Direction!
  id: ID!
  lineId: String!
  mode: String
  name: String
  origin: String
  originStopId: String!
  routeId: String!
}

type RouteGeometry {
  coordinates: [RouteGeometryPoint!]!
  id: ID!
  mode: String
}

type RouteGeometryPoint implements Position {
  lat: Float!
  lng: Float!
}

type RouteSegment implements Position {
  alerts: [Alert!]!
  cancellations: [Cancellation!]!
  destination: String!
  direction: Direction!
  distanceFromPrevious: Int
  distanceFromStart: Int
  duration: Int
  id: ID!
  isTimingStop: Boolean!
  lat: Float!
  lineId: String
  lng: Float!
  modes: [String]!
  name: String
  originStopId: String
  radius: Float
  routeId: String!
  shortId: String!
  stopId: String!
  stopIndex: Int!
}

type SimpleRoute {
  direction: Direction!
  isTimingStop: Boolean!
  routeId: String!
}

type SimpleStop implements Position {
  _matchScore: Float
  alerts: [Alert!]!
  id: ID!
  lat: Float!
  lng: Float!
  modes: [String]!
  name: String
  radius: Float
  routes: [SimpleRoute!]!
  shortId: String!
  stopId: String!
}

type Stop implements Position {
  alerts: [Alert!]!
  id: ID!
  lat: Float!
  lng: Float!
  modes: [String]!
  name: String
  radius: Float
  routes: [StopRoute!]!
  shortId: String!
  stopId: String!
}

type StopRoute {
  direction: Direction!
  id: ID!
  isTimingStop: Boolean!
  lineId: String
  mode: String
  originStopId: String
  routeId: String!
}

type UIMessage {
  date: String
  message: String
}

type VehicleJourney {
  alerts: [Alert!]!
  cancellations: [Cancellation!]!
  departureDate: Date!
  departureTime: Time!
  direction: Direction!
  headsign: String
  id: ID!
  isCancelled: Boolean!
  lineId: String
  mode: String
  nextStopId: String!
  operatorId: String
  originStopId: String
  receivedAt: DateTime!
  recordedAt: DateTime!
  recordedAtUnix: Int!
  recordedTime: Time!
  routeId: String!
  timeDifference: Int!
  uniqueVehicleId: VehicleId
  vehicleId: String
}

enum AlertCategory {
  ACCIDENT
  ASSAULT
  DISTURBANCE
  EARLIER_DISRUPTION
  ITS_SYSTEM_ERROR
  MEDICAL_INCIDENT
  MISPARKED_VEHICLE
  NO_DRIVER
  NO_TRAFFIC_DISRUPTION
  OTHER
  OTHER_DRIVER_ERROR
  POWER_FAILURE
  PUBLIC_EVENT
  ROAD_CLOSED
  ROAD_MAINTENANCE
  ROAD_TRENCH
  SEIZURE
  STAFF_DEFICIT
  STATE_VISIT
  STRIKE
  SWITCH_FAILURE
  TECHNICAL_FAILURE
  TEST
  TOO_MANY_PASSENGERS
  TRACK_BLOCKED
  TRACK_MAINTENANCE
  TRAFFIC_ACCIDENT
  TRAFFIC_JAM
  VEHICLE_BREAKDOWN
  VEHICLE_DEFICIT
  VEHICLE_OFF_THE_ROAD
  WEATHER
  WEATHER_CONDITIONS
}

enum AlertDistribution {
  ALL_ROUTES
  ALL_STOPS
  NETWORK
  ROUTE
  STOP
}

enum AlertImpact {
  BICYCLE_STATION_OUT_OF_ORDER
  BICYCLE_SYSTEM_OUT_OF_ORDER
  CANCELLED
  DELAYED
  DEVIATING_SCHEDULE
  DISRUPTION_ROUTE
  IRREGULAR_DEPARTURES
  IRREGULAR_DEPARTURES_MAX_15
  IRREGULAR_DEPARTURES_MAX_30
  NO_TRAFFIC_IMPACT
  OTHER
  POSSIBLE_DEVIATIONS
  POSSIBLY_DELAYED
  REDUCED_BICYCLE_PARK_CAPACITY
  REDUCED_TRANSPORT
  RETURNING_TO_NORMAL
  UNKNOWN
  VENDING_MACHINE_OUT_OF_ORDER
}

enum AlertLevel {
  INFO
  SEVERE
  WARNING
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum CancellationEffect {
  CANCEL_ENTIRE_DEPARTURE
  CANCEL_STOPS_FROM_END
  CANCEL_STOPS_FROM_MIDDLE
  CANCEL_STOPS_FROM_START
}

enum CancellationSubcategory {
  ASSAULT_ON_DRIVER
  ASSAULT_ON_PASSENGER
  ASSAULT_ON_VEHICLE
  BREAK_MALFUNCTION
  CONGESTION_CAUSED_BY_ACCIDENT
  CONGESTION_CAUSED_BY_WEATHER
  CONGESTION_REASON_UKNOWN
  DEVICE_ERROR
  DOOR_MALFUNCTION
  DRIVER_ERROR
  DRIVER_LATE
  DRIVER_SEIZURE
  ELECTRIC_MALFUNCTION
  ENGINE_MALFUNCTION
  FALSE_ALARM
  FAULT_UNKNOWN
  FLUID_LEAKAGE
  INSUFFICIENT_CAPASITY
  INSUFFICIENT_INSTRUCTIONS_BY_AUTHORITY
  INSUFFICIENT_INSTRUCTIONS_BY_OPERATOR
  ITS_SYSTEM_NOT_INSTALLED
  MISSPARKED_VEHICLE
  ND_OPERATOR_PLANNING_ERROR
  NO_VEHICLE_AVAILABLE
  OPERATOR_DEVICE_ERROR
  OPERATOR_PERSONNEL_ON_STRIKE
  OPPOSITE_FAULT
  OTHER_ASSAULT
  OTHER_ITS_ERROR
  OTHER_MALFUNCTION
  OTHER_OPERATOR_REASON
  OTHER_SEIZURE
  OTHER_STRIKE
  OUT_OF_FUEL
  OWN_FAULT
  PASSED_OUT_PASSENGER
  PASSENGER_INJURED
  PASSENGER_SEIZURE
  ROAD_BLOCKED
  SLIPPERY_TRACK
  STAFF_SHORTAGE
  STUCK_CAUSED_BY_SLIPPERY
  UNDRIVEABLE_CONDITIONS
  UNKNOWN_CAUSE
  USER_ERROR
  VEHICLE_OFF_THE_ROAD_BY_DRIVER_ERROR
  VEHICLE_OFF_THE_ROAD_BY_OTHER_REASON
  WRONG_INFORMATION_IN_DEVICE
}

enum CancellationType {
  BLOCK_FIRST_DEPARTURE_LATE
  CANCEL_DEPARTURE
  DEPARTURED_AFTER_NEXT_JOURNEY
  DETOUR
  EARLY_DEPARTURE
  EARLY_DEPARTURE_FROM_TIMING_POINT
  LATE_DEPARTURE
  SKIPPED_STOP_CALLS
  TIS_ERROR
}

input AlertSearchInput {
  all: Boolean
  allRoutes: Boolean
  allStops: Boolean
  network: Boolean
  route: String
  stop: String
}

input AreaEventsFilterInput {
  direction: Direction
  routeId: String
}

input CancellationSearchInput {
  all: Boolean
  departureTime: String
  direction: Int
  latestOnly: Boolean
  routeId: String
}

input DepartureFilterInput {
  direction: Direction
  maxHour: Int
  minHour: Int
  routeId: String
}

input EquipmentFilterInput {
  operatorId: String
  search: String
  vehicleId: String
}

input LineFilterInput {
  includeLinesWithoutRoutes: Boolean
  search: String
}

input RouteFilterInput {
  direction: Direction
  routeId: String
  search: String
}

input StopFilterInput {
  search: String
}


"A Date string in YYYY-MM-DD format. The timezone is assumed to be Europe/Helsinki."
scalar Date

"The direction of a route. An integer of either 1 or 2."
scalar Direction

"A DateTime string in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Timezone will be converted to Europe/Helsinki."
scalar DateTime

"A string that defines a bounding box. The coordinates should be in the format `minLng,maxLat,maxLng,minLat` which is compatible with what Leaflet's LatLngBounds.toBBoxString() returns. The precise bbox is not rounded."
scalar PreciseBBox

"Time is seconds from 00:00:00 in format HH:mm:ss. The hours value can be more than 23. The timezone is assumed to be Europe/Helsinki"
scalar Time

"A string that uniquely identifies a vehicle. The format is [operator ID]/[vehicle ID]. The operator ID is padded to have a length of 4 characters."
scalar VehicleId

"A string that defines a bounding box. The coordinates should be in the format `minLng,maxLat,maxLng,minLat` which is compatible with what Leaflet's LatLngBounds.toBBoxString() returns. Toe coordinates will be rounded, use PreciseBBox if this is not desired."
scalar BBox

"The `Upload` scalar type represents a file upload."
scalar Upload
